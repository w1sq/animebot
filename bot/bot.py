import asyncio
import logging
from aiogram import Bot, Dispatcher, executor
import aiogram   
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
import sqlite3
from aiogram.dispatcher.filters.state import State, StatesGroup
import re
from searcher import Searcher

searcher =  Searcher()


with open('bot/key.txt','r') as file:
    API_KEY = file.readline()
logging.basicConfig(level=logging.INFO, filename='botlogs.log')
bot = Bot(token=API_KEY)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
con = sqlite3.connect("bot/users.db",check_same_thread=False)
cur = con.cursor()
print('Bot started')

class FormLinkSearchAnime(StatesGroup):
    answer = State()

class FormLinkSearchSeries(StatesGroup):
    answer = State()


def generate_keyboard (*answer):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    temp_buttons = []
    for i in answer:
        temp_buttons.append(KeyboardButton(text=i))
    keyboard.add(*temp_buttons)
    return keyboard

def generate_inline_keyboard (*answer):
    keyboard = InlineKeyboardMarkup()
    temp_buttons = []
    for i in answer:
        temp_buttons.append(InlineKeyboardButton(text=str(i[0]), callback_data=i[1]))
    keyboard.add(*temp_buttons)
    return keyboard

general_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row\
(KeyboardButton('üîé–ù–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª'),KeyboardButton('üîé–ù–∞–π—Ç–∏ –º—É–ª—å—Ç–∏–∫')).row(KeyboardButton('‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'),KeyboardButton('‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))

search_series_keyboard = InlineKeyboardMarkup(resize_keyboard=True).row\
(InlineKeyboardButton(text= 'üîé–ù–∞–∑–≤–∞–Ω–∏–µ',callback_data='name_search_series'),InlineKeyboardButton(text='üîé–ü–æ —Å—Å—ã–ª–∫–µ',callback_data='link_search_series'),InlineKeyboardButton(text='üéØ–§–∏–ª—å—Ç—Ä',callback_data='filter_series'))

search_anime_keyboard = InlineKeyboardMarkup(resize_keyboard=True).row\
(InlineKeyboardButton(text='üîé–ù–∞–∑–≤–∞–Ω–∏–µ',callback_data='name_search_anime'),InlineKeyboardButton(text='üîé–ü–æ —Å—Å—ã–ª–∫–µ',callback_data='link_search_anime'),InlineKeyboardButton(text='üéØ–§–∏–ª—å—Ç—Ä',callback_data='filter_anime'))

filter_keyboard = InlineKeyboardMarkup(resize_keyboard=True).row\
(InlineKeyboardButton(text='üé≠–ñ–∞–Ω—Ä', callback_data='genre'),InlineKeyboardButton(text='üë§–ê–≤—Ç–æ—Ä', callback_data='author'),InlineKeyboardButton(text='üìÖ–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', callback_data='date'))

link_processing_series_keyboard = InlineKeyboardMarkup(resize_keyboard=True).row\
(InlineKeyboardButton(text='‚ùå–û—Ç–º–µ–Ω–∞', callback_data='cancel_processing_series'),InlineKeyboardButton(text=' üîÑ–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',callback_data='retry_processing_series'))

link_processing_anime_keyboard = InlineKeyboardMarkup(resize_keyboard=True).row\
(InlineKeyboardButton(text='‚ùå–û—Ç–º–µ–Ω–∞', callback_data='cancel_processing_anime'),InlineKeyboardButton(text=' üîÑ–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',callback_data='retry_processing_anime'))



@dp.message_handler(commands=['start'])
async def start(message):
    user_id = message.chat.id
    if not cur.execute('''SELECT id FROM user_info
                             WHERE id==?''',(user_id,)).fetchone():
        cur.execute('''INSERT INTO user_info VALUES (?,?,?,?)''',(user_id,'member','',False))
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n\n–ú—ã —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –±–∞–∑–∞ —Å –ê–Ω–∏–º–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞–º–∏ –∏ —Å–µ—Ä–∏–∞–ª–∞–º–∏.', reply_markup=general_keyboard)


@dp.message_handler(text='üîé–ù–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª')
async def search(message):
    chat_id = message.chat.id
    await message.delete()
    await bot.send_message(chat_id,'*–ü–æ–∏—Å–∫* \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å:\n\n\
    *–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é* - –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ\n\n\
    *–ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ* - –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–Ω–∏–º–µ —Å –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –∏–ª–∏ imdb\n\n\
    *–§–∏–ª—å—Ç—Ä* - –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–∞–π—Ç–ª—ã –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.'
    ,reply_markup=search_series_keyboard,parse_mode='Markdown')


@dp.message_handler(text='üîé–ù–∞–π—Ç–∏ –º—É–ª—å—Ç–∏–∫')
async def search(message):
    chat_id = message.chat.id
    await message.delete()
    await bot.send_message(chat_id,'*–ü–æ–∏—Å–∫* \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å:\n\n\
    *–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é* - –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ\n\n\
    *–ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ* - –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–Ω–∏–º–µ —Å –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –∏–ª–∏ imdb\n\n\
    *–§–∏–ª—å—Ç—Ä* - –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–∞–π—Ç–ª—ã –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.'
    ,reply_markup=search_anime_keyboard,parse_mode='Markdown')



@dp.message_handler(text='‚≠ê–ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
async def favorite(message):
    chat_id = message.chat.id
    await message.delete()
    await bot.send_message(chat_id=chat_id,text='*–ò–∑–±—Ä–∞–Ω–Ω–æ–µ* \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∞–π—Ç–ª—ã',parse_mode='Markdown')


@dp.message_handler(text='‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings(message):
    chat_id = message.chat.id
    subscribtion = cur.execute('''
    SELECT subscription from user_info
    WHERE id = ?
    ''',(chat_id,)).fetchone()[0]
    if subscribtion :
        settings_keyboard = generate_inline_keyboard(['‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è','unsubscribe'])
    else:
        settings_keyboard = generate_inline_keyboard(['‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è','subscribe'])
    await message.delete()
    await bot.send_message(chat_id,'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏* \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ç–∞–π—Ç–ª–æ–≤',reply_markup=settings_keyboard,parse_mode='Markdown')


async def name_search_series(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')

async def name_search_anime(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')


async def link_search_anime(message):
    chat_id = message.chat.id
    await bot.send_message(chat_id,'–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –∞–Ω–∏–º–µ –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫:\n\
                                    www.imdb.com\n\
                                    www.kinopoisk.ru\n\
                                    shikimori.one',parse_mode='Markdown')
    await FormLinkSearchAnime.answer.set()


@dp.message_handler(state=FormLinkSearchAnime.answer)
async def link_processing_anime(message,state):
    if 'imdb.com' in str(message):
        title = await searcher.search_imdb_id(str(message),types='anime')
        for num, i in enumerate(title):
            anime_result_inline_keyboard = InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text='üçø–°–º–æ—Ç—Ä–µ—Ç—å',url=f'http://127.0.0.1:5000/{i.id}')).add(InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ',callback_data=f'add_to_favorites_{i.imdb_id}')).add(InlineKeyboardButton(text='üîé–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',callback_data='name_search_anime'))
            await message.answer(i,reply_markup=anime_result_inline_keyboard,parse_mode='html')
        await state.finish()
    elif 'kinopoisk.ru' in str(message):
        title = await searcher.search_kinopoisk_id(str(message),types='anime')
        for num, i in enumerate(title):
            anime_result_inline_keyboard = InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text='üçø–°–º–æ—Ç—Ä–µ—Ç—å',url=f'http://127.0.0.1:5000/{i.id}')).add(InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ',callback_data=f'add_to_favorites_{i.imdb_id}')).add(InlineKeyboardButton(text='üîé–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',callback_data='name_search_anime'))
            await message.answer(i,reply_markup=anime_result_inline_keyboard,parse_mode='html')
        await state.finish()
    elif 'shikimori.one' in str(message):
        title = await searcher.search_shikimori_id(str(message),types='anime')
        for num, i in enumerate(title):
            anime_result_inline_keyboard = InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text='üçø–°–º–æ—Ç—Ä–µ—Ç—å',url=f'http://127.0.0.1:5000/{i.id}')).add(InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ',callback_data=f'add_to_favorites_{i.imdb_id}')).add(InlineKeyboardButton(text='üîé–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',callback_data='name_search_anime'))
            await message.answer(i,reply_markup=anime_result_inline_keyboard,parse_mode='html')
        await state.finish()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É',reply_markup=link_processing_anime_keyboard)


async def link_search_series(message):
    chat_id = message.chat.id
    await bot.send_message(chat_id,'–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å–µ—Ä–∏–∞–ª–∞ –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫:\n\
                                    www.imdb.com\n\
                                    www.kinopoisk.ru\n\
                                    shikimori.one',parse_mode='Markdown')
    await FormLinkSearchSeries.answer.set()



@dp.message_handler(state=FormLinkSearchSeries.answer)
async def link_processing_anime(message,state):
    if 'imdb.com' in str(message):
        title = await searcher.search_imdb_id(str(message),types='anime-serial')
        for num, i in enumerate(title):
            anime_result_inline_keyboard = InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text='üçø–°–º–æ—Ç—Ä–µ—Ç—å',url=f'http://127.0.0.1:5000/{i.id}')).add(InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ',callback_data=f'add_to_favorites_{i.imdb_id}')).add(InlineKeyboardButton(text='üîé–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',callback_data='name_search_anime'))
            await bot.send_photo(message.chat.id, i.poster_image,i,reply_markup=anime_result_inline_keyboard)
        await state.finish()
    elif 'kinopoisk.ru' in str(message):
        title = await searcher.search_kinopoisk_id(str(message),types='anime-serial')
        for num, i in enumerate(title):
            anime_result_inline_keyboard = InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text='üçø–°–º–æ—Ç—Ä–µ—Ç—å',url=f'http://127.0.0.1:5000/{i.id}')).add(InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ',callback_data=f'add_to_favorites_{i.imdb_id}')).add(InlineKeyboardButton(text='üîé–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',callback_data='name_search_anime'))
            await bot.send_photo(message.chat.id, i.poster_image,i,reply_markup=anime_result_inline_keyboard)
        await state.finish()
    elif 'shikimori.one' in str(message):
        title = await searcher.search_shikimori_id(str(message),types='anime-serial')
        for num, i in enumerate(title):
            anime_result_inline_keyboard = InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text='üçø–°–º–æ—Ç—Ä–µ—Ç—å',url=f'http://127.0.0.1:5000/{i.id}')).add(InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ',callback_data=f'add_to_favorites_{i.imdb_id}')).add(InlineKeyboardButton(text='üîé–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',callback_data='name_search_anime'))
            await bot.send_photo(message.chat.id, i.poster_image,i,reply_markup=anime_result_inline_keyboard)
        await state.finish()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É',reply_markup=link_processing_anime_keyboard)


async def filtr_series(message):
    chat_id = message.chat.id
    await bot.send_message(chat_id,'–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ —Å–µ–∞—Ä–∏–∞–ª–æ–≤',reply_markup=filter_keyboard,parse_mode='Markdown')


async def filtr_anime(message):
    chat_id = message.chat.id
    await bot.send_message(chat_id,'–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∞–Ω–∏–º–µ',reply_markup=filter_keyboard,parse_mode='Markdown')


async def cancel_processing_series(message):
    pass


async def cancel_processing_anime(message):
    pass


async def add_to_favorites(message,id):
    pass



async def subscribe(message):
    cur.execute('''
    UPDATE user_info
    SET subscription = ?
    WHERE id = ?
    ''',(True,message.chat.id,))
    await settings(message)

async def unsubscribe(message):
    cur.execute('''
    UPDATE user_info
    SET subscription = ?
    WHERE id = ?
    ''',(False,message.chat.id,))
    await settings(message)


@dp.callback_query_handler(lambda call: True)
async def ans(call):
    message = call.message
    if call.data == 'name_search_series':
        await call.message.delete()
        await name_search_series(message)
    elif call.data == 'name_search_anime':
        await call.message.delete()
        await name_search_series(message)
    elif call.data == 'link_search_series':
        await call.message.delete()
        await link_search_series(message)
    elif call.data == 'link_search_anime':
        await call.message.delete()
        await link_search_anime(message)
    elif call.data == 'filter_series':
        await filtr_series(message)
    elif call.data == 'filter_anime':
        await filtr_series(message)
    elif call.data == 'cancel_processing_series':
        await cancel_processing_series(message)
    elif call.data == 'cancel_processing_anime':
        await cancel_processing_anime(message)
    elif call.data == 'unsubscribe':
        await call.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        await unsubscribe(message)
    elif call.data == 'subscribe':
        await call.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        await subscribe(message)
    elif call.data == 'cancel_processing':
        pass
    elif 'add_to_favorites' in call.data :
        id = re.findall(re.compile(r'tt\d+'), call.data)[0]
        await add_to_favorites(message,id)

async def main():
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())